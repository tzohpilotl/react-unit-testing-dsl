* Example (actual integration test)
#+BEGIN_SRC typescript :tangle src/integration.test.tsx
  import React, { useState } from "react";
  import myDescribe from "./index";

  const Clickable = ({ name }: { name: string }) => {
    const [loggedIn, setLoggedIn] = useState(false);
    return (
      <>
        <p>{loggedIn ? `Hello ${name}!` : "Hello stranger"}</p>
        <button onClick={() => setLoggedIn(!loggedIn)}>click</button>
        </>
    );
  };

  async function testAComponent() {
    return await myDescribe(Clickable, function ({ given, when, then }) {
      given("valid props", () => ({ name: "Mario" }));
      when("the user clicks it once", ({ click }) => [
        // The "when" function receives the functions from @testing-library/user-event
        [
          async ({ findByText }) => await findByText(/stranger/),
          () => {
            // No behavior here since we just want to make sure the component says "stranger" in the beginning
          },
        ],
        // These behavior specs receive the render result with all its queries
        [async ({ findByText }) => await findByText("click"), click],
      ]);
      then("displays a text", ({ findByText }) => [
        // The "then" function receives the render result with all its quries
        async () => await findByText(/Mario/, {}, { timeout: 10 }),
      ]);
    });
  }

  describe("integration", function () {
    it("executes without errors", async function () {
      await expect(testAComponent()).resolves.not.toThrow();
    });
  });
#+END_SRC


* TODO Tasks [9/15]
+ [X] Add eslint config
+ [X] Make describe blocks declarative
+ [X] Write tests for the ~describe~ function
+ [X] Remove the need to call ~await~ inside ~description~ blocks
+ [X] Pass the whole ~userEvent~ API to the user
+ [X] Allow to trigger behavior for especific nodes in ~when~ function
+ [X] Allow to perform multiple behavior steps on especific nodes in ~when~ function
+ [X] Write tests for ~when~ function
+ [X] Write tests for ~given~ function
+ [ ] Write tests for ~then~ function
+ [ ] Integrate into Jest
+ [ ] Integrate with React Testing Library assertions
+ [ ] Consider moving non-behavior preconditions from the ~when~ function to the ~given~ function
+ [ ] Consider having the option of changing the interface from ~given~, ~when~,
  ~then~, to something else
+ [ ] Make it possible to test stuff other than React components
